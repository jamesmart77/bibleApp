{"version":3,"sources":["helpers/constants.js","mobile/MobileView.js","common/Title.js","common/Search.js","desktop/DesktopView.js","common/Footer.js","App.js","serviceWorker.js","index.js"],"names":["exports","searchTypes","passages","keyword","MobileView","className","Component","Title","Search","props","type","onSearch","useState","text","setText","onSubmit","e","preventDefault","s","value","placeholder","onChange","target","waves","DesktopView","state","isPassageExpanded","isKeywordExpanded","console","log","this","xl","m","header","expanded","node","onClick","setState","icon","Footer","currentYear","Date","getFullYear","href","rel","App","isDesktop","withSizes","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dd93ab2d.chunk.js","sourcesContent":["exports.searchTypes = {\n    passages: \"passages\",\n    keyword: \"keyword\",\n}","import React, { Component } from 'react';\n\nclass MobileView extends Component {\n  render() {\n    return (\n      <div className=\"mobile-container\">\n          <h1> This is rendered only in Mobile </h1>\n      </div>\n    );\n  }\n}\n\nexport default MobileView;\n","import React from 'react';\n\nfunction Title () {\n  return (\n    <div className=\"title-container\">\n      <h2 className=\"text\">Bible App</h2>\n    </div>\n  );\n}\n\nexport default Title;\n","import React, { useState } from 'react';\nimport { TextInput, Button, Row, Col, Icon } from 'react-materialize';\nimport { searchTypes } from '../helpers/constants';\n\nfunction Search (props) {\n\n    const { type, onSearch } = props;\n    const [text, setText] = useState('');\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        setText('');\n        onSearch(text, type);\n    }\n\n    return (\n        <div className=\"search-container\">\n            <form onSubmit={handleSearch}>\n                <TextInput \n                    s={12}\n                    value={text}\n                    placeholder={type === searchTypes.keyword ? \"Repent\" : \"John 3:1-10\"}\n                    onChange={(e) => setText(e.target.value)}\n                />\n                <Row>\n                    <Col s={12} className=\"btn-wrapper\">\n                        <Button \n                            className=\"search-btn\"\n                            type=\"submit\"\n                            waves=\"light\"\n                        >\n                            <Icon className=\"icon\">search</Icon>\n                            Search\n                        </Button>\n                    </Col>\n                </Row>\n            </form>\n        </div>\n    );\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport { Row, Col, Collapsible, CollapsibleItem, Icon } from 'react-materialize';\nimport Title from '../common/Title';\nimport Search from '../common/Search';\nimport { searchTypes } from '../helpers/constants';\n\nclass DesktopView extends Component {\n  state = {\n    isPassageExpanded: true,\n    isKeywordExpanded: false,\n  }\n\n  onSearch = (value, type) => {\n    console.log(\"Value: \", value);\n    console.log(\"Type: \", type);\n  }\n\n\n  render() {\n    const { isPassageExpanded, isKeywordExpanded } = this.state;\n\n    return (\n      <div className=\"desktop-container\">\n        <Row className=\"row-wrapper\">\n          <Col xl={3} m={4} className=\"col-wrapper search-col\">\n            <Title />\n            <Collapsible>\n              <CollapsibleItem \n                header=\"Passages\" \n                expanded={true} \n                node=\"div\"\n                onClick={() => this.setState({ \n                  isKeywordExpanded: false,\n                  isPassageExpanded: !isPassageExpanded,\n                 })}\n                icon={isPassageExpanded ? <Icon>keyboard_arrow_down</Icon> : <Icon>keyboard_arrow_right</Icon>}\n              >\n                <Search type={searchTypes.passages} onSearch={this.onSearch}/>\n              </CollapsibleItem>\n              <CollapsibleItem \n                header=\"Keyword\" \n                node=\"div\"\n                onClick={() => this.setState({ \n                  isKeywordExpanded: !isKeywordExpanded,\n                  isPassageExpanded: false,\n                 })}\n                icon={isKeywordExpanded ? <Icon>keyboard_arrow_down</Icon> : <Icon>keyboard_arrow_right</Icon>}\n              >\n                <Search type={searchTypes.keyword} onSearch={this.onSearch}/>\n              </CollapsibleItem>\n            </Collapsible>\n          </Col>\n          <Col xl={9} m={8} className=\"col-wrapper display-col\">\n            <div>Currently under construction...</div>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default DesktopView;\n","import React from 'react';\n\nfunction Footer () {\n  const currentYear = new Date().getFullYear();\n  \n  return (\n    <footer className=\"footer-container\">\n        &copy; {currentYear} \n        {' '}\n        <a \n        href=\"https://jamesmart77.github.io\" \n        target=\"_blank\" \n        rel=\"noopener noreferrer\"\n        >\n          James Martineau\n        </a>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport withSizes from 'react-sizes'\nimport MobileView from './mobile/MobileView';\nimport DesktopView from './desktop/DesktopView';\nimport Footer from './common/Footer';\n\nclass App extends Component {\n  render() {\n\n    const { isDesktop } = this.props;\n    return (\n      <div className=\"app-container\">\n        <main>\n          {isDesktop ? (\n            <DesktopView />\n          ) : (\n            <MobileView />\n          )}\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nconst mapSizesToProps = ({ width }) => ({\n  isDesktop: width >= 900,\n})\n\nexport default withSizes(mapSizesToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}